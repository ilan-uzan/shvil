name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build
      run: |
        xcodebuild -project shvil.xcodeproj -scheme shvil -destination 'platform=iOS Simulator,name=iPhone 16' build
      
    - name: Test
      run: |
        xcodebuild -project shvil.xcodeproj -scheme shvil -destination 'platform=iOS Simulator,name=iPhone 16' test
      
    - name: Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Xcode Test Results
        path: shvil.xcodeproj
        reporter: java-junit

  lint:
    name: Lint
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: SwiftLint
      uses: norio-nomura/action-swiftlint@3.0.0
      with:
        args: --strict
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security:
    name: Security Scan
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Security Scan
      run: |
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key" --include="*.swift" --exclude-dir=".git" . | grep -v "// TODO\|// FIXME"; then
          echo "‚ùå Potential hardcoded secrets found"
          exit 1
        fi
        
        # Check for force unwraps
        if grep -r "!" --include="*.swift" --exclude-dir=".git" . | grep -v "// TODO\|// FIXME"; then
          echo "‚ùå Force unwraps found"
          exit 1
        fi
        
        echo "‚úÖ Security scan passed"

  performance:
    name: Performance Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Performance Test
      run: |
        # Build with performance optimizations
        xcodebuild -project shvil.xcodeproj -scheme shvil -destination 'platform=iOS Simulator,name=iPhone 16' build -configuration Release
        
        # Run performance tests
        xcodebuild -project shvil.xcodeproj -scheme shvil -destination 'platform=iOS Simulator,name=iPhone 16' test -only-testing:shvilTests/PerformanceOptimizerTests

  accessibility:
    name: Accessibility Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Accessibility Test
      run: |
        # Run accessibility tests
        xcodebuild -project shvil.xcodeproj -scheme shvil -destination 'platform=iOS Simulator,name=iPhone 16' test -only-testing:shvilTests/AccessibilityManagerTests

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Build iOS
      run: |
        xcodebuild -project shvil.xcodeproj -scheme shvil -destination 'platform=iOS Simulator,name=iPhone 16' build -configuration Release
        
    - name: Archive
      run: |
        xcodebuild -project shvil.xcodeproj -scheme shvil -destination 'generic/platform=iOS' archive -archivePath shvil.xcarchive

  deploy:
    name: Deploy
    runs-on: macos-latest
    needs: [test, lint, security, performance, accessibility, build-ios]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Deploy to TestFlight
      run: |
        echo "üöÄ Deploying to TestFlight..."
        # Add TestFlight deployment steps here